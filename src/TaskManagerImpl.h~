#ifndef TASKMANAGERIMPL_H
#define TASKMANAGERIMPL_H


#ifdef __cplusplus
namespace LowLevel
{
#endif

	typedef void (*TaskCallback)();



#define MAX_PRIORITY 10	
#define STACK_SIZE 10000

/**
   Task structure
 */
typedef struct tTask
{
	
	char isRunned; // 	
	TaskCallback callback;
	int priority;
	unsigned long long wakeupTime;

	void* stackArea;
	void* stackPointerESP;
	void* stackPointerEBP;
	struct tTask *next;
} Task;


#ifdef __cplusplus
extern "C" 
{
#endif 
	Task* CreateTask (int priority, TaskCallback callback);
	void TaskManager();
	int DestroyTask(Task *task);
	
	void Run(Task* task);
	void Sleep (Task* task, int ticks);
	unsigned long long getTime();
#ifdef __cplusplus
}
#endif 

#ifdef __cplusplus
} //namespace
#endif


#endif //TASKMANAGERIMPL_H
